<?php
/**
 * @file
 * Custom module to keep track of sales of products that belong to a user, minus a commission.
 */

/**
 * Implements hook_uc_order().
 */
function uc_commission_sales_uc_order($op, &$order, $state) {
  // we're only interested in fully completed order updates
  if ($op == 'update' &&
      $order->order_status == "payment_received" &&
      $state == "completed") {
    // loop through the products in this order
    foreach ($order->products as $product) {
      $uccs_price = floatval($product->price);
      // only interested if it's a product that has non-zero price
      if ($uccs_price > 0) {
        // select the node to work out the user who created this product
        $uccs_nid = $product->nid;
        $res = db_query('SELECT n.uid FROM {node} n WHERE n.nid = :nid', array(':nid' => $uccs_nid));
        foreach ($res as $record) {
          // calculate amount owed
          $uccs_rate = (100 - variable_get('uc_commission_sales_rate', 0)) / 100;
          $uccs_amount_after_commission = $uccs_price * $uccs_rate;
          // try to select existing uid
          $res2 = db_query('SELECT n.* FROM {uc_commission_sales} n WHERE n.uid = :uid', array(':uid' => $record->uid));
          $record2 = $res2->fetchObject();
          // if not write a new record
          if (!$record2) {
            $record2 = new stdClass();
            $record2->uid = $record->uid;
            $record2->amount_owed = 0;
            $record2->last_payout = 0;
            $record2->total = 0;
            $uccs_amount_owed = $record2->amount_owed;
            $record2->amount_owed += $uccs_amount_after_commission;
            drupal_write_record('uc_commission_sales', $record2);
            watchdog('uc_commission_sales', 'added £%amnt to new uid %uid', array('%amnt' => $uccs_amount_after_commission, '%uid' => $record2->uid), WATCHDOG_NOTICE, 'sale');
          }
          else {
            // since uid already exists, just update the amount_owed
            db_update('uc_commission_sales')
                ->expression('amount_owed', 'amount_owed + :amount', array(':amount' => $uccs_amount_after_commission))
                ->condition('uid', $record->uid)
                ->execute();
            watchdog('uc_commission_sales', 'added £%amnt to existing uid %uid', array('%amnt' => $uccs_amount_after_commission, '%uid' => $record->uid), WATCHDOG_NOTICE, 'sale');
          }
        }
      }
    }
  }
}

/**
 * Implements hook_menu().
 */
function uc_commission_sales_menu() {
	$items['admin/store/settings'] = array(
		'title' => 'Commission Sales',
		'description' => 'Set up commission rate for sales',
		'position' => 'right',
		'weight' => 0,
		'page callback' => 'system_admin_menu_block_page',
		'access arguments' => array('administer store settings'),
		'file' => 'system.admin.inc',
		'file path' => drupal_get_path('module', 'system'),
	);

	$items['admin/store/settings/commission_sales'] = array(
		'title' => 'Commission Sales settings',
		'description' => 'Set up commission rate',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('uc_commission_sales_settings'),
		'access arguments' => array('administer store settings'),
		'file' => 'uc_commission_sales.admin.inc',
	);

  $items['admin/store/reports/commission_sales'] = array(
    'title' => 'Commission Sales',
    'description' => 'View report of how much users have earned',
    'page callback' => 'uc_commission_sales_report',
    'access arguments' => array('administer store settings'),
    'type' => MENU_NORMAL_ITEM,
  );

	return $items;
}

/**
 * Report on how much each content creator is owed.
 */
function uc_commission_sales_report() {
  $output = '<h2>Commission Sales</h2>';
  $output .= '<table>';
  $output .= '<tr bgcolor="#ccc"><td>Username</td><td>Amount owed</td><td>Last Payout Amount</td><td>Last payout date</td><td>Total earned</td></tr>';

  $res = db_query('SELECT u.name,n.* FROM {users} u, {uc_commission_sales} n WHERE u.uid = n.uid');
  $bg = '#fff';
  foreach ($res as $record) {
    $output .= '<tr bgcolor="' . $bg . '"><td>' . $record->name . '</td><td>£' . number_format($record->amount_owed, 2) . '</td>';
    $output .= '<td>£' . number_format($record->last_payout, 2) . '</td><td>';
    if ($record->last_payout_date != 0) $output .= format_date($record->last_payout_date, 'short'); else $output .= 'never';
    $output .= '</td><td>£' . number_format($record->total, 2) . '</td></tr>';
    $bg = ($bg == "#fff")?'#eee':'#fff';
  }

  $output .= '</table>';

  return $output;
}

/**
 * Implements hook_cron_queue_info().
 */
function uc_commission_sales_cron_queue_info() {
  $queues['uc_commission_sales_q'] = array(
    'worker callback' => 'uc_commission_sales_q_process',
    'time' => 10,
  );
  return $queues;
}

/**
 * Implements hook_cron().
 */
function uc_commission_sales_cron() {
  $today = date("j");
  // depending on what day we are supposed to do the mass payments check if it's beginning of month and so reset rancron flag
  if (variable_get('uc_commission_sales_masspay_day', 0) == 1) {
    if ($today == 2) variable_set('uc_commission_sales_rancron', FALSE);
  }
  else {
    if ($today == 1) variable_set('uc_commission_sales_rancron', FALSE);
  }
  if ($today == variable_get('uc_commission_sales_masspay_day', 0)) {
    // only do this once per month
    if (!variable_get('uc_commission_sales_rancron', FALSE)) {
      variable_set('uc_commission_sales_rancron', TRUE);
      // today's the day, get a list of all users owed and their paypal address
      $res = db_query('SELECT n.amount_owed,m.field_paypal_address_value,n.uid
                       FROM {uc_commission_sales} n,{field_data_field_paypal_address} m
                       WHERE n.uid = m.entity_id');
      $c = 0;
      $MPitems = array();
      foreach ($res as $record) {
        // only interested if they owed over £50
        if ($record->amount_owed > 50) {
          // create a new Mass Pay item
          $MPitems[$c] = array('l_email' => $record->field_paypal_address_value,
                               'l_amt' => $record->amount_owed
                                );
          $c++;
          // update the commission sales database
          db_update('uc_commission_sales')
              ->expression('total', 'total + :amount', array(':amount' => $record->amount_owed))
              ->condition('uid', $record->uid, '=')
              ->execute();
          db_update('uc_commission_sales')
              ->fields(array(
                'last_payout' => $record->amount_owed,
                'last_payout_date' => time(),
                'amount_owed' => 0,
                ))
              ->condition('uid', $record->uid, '=')
              ->execute();
        }
      }
      require_once('paypal-config.php');
      require_once('paypal-php-library-master/autoload.php');
      $PayPalConfig = array('Sandbox' => $sandbox,
                            'APIUsername' => $api_username,
                            'APIPassword' => $api_password,
                            'APISignature' => $api_signature,
                            'PrintHeaders' => $print_headers,
                            'LogResults' => $log_results,
                            'LogPath' => $log_path,
                            );
      $PayPal = new angelleye\PayPal\PayPal($PayPalConfig);
      $MPfields = array('emailsubject' => "You've been paid your share!", 'currencycode' => 'GBP', 'receivertype' => 'EmailAddress');
      $PayPalRequestData = array('MPFields' => $MPfields, 'MPItems' => $MPitems);
      $PayPalResult = $PayPal->MassPay($PayPalRequestData);
      if ($PayPalResult == 1) watchdog('uc_commission_sales', 'PayPal Mass Pay successful', array(), WATCHDOG_NOTICE, 'payout'); else watchdog('uc_commission_sales', 'result:' . var_dump($PayPalResult), array(), WATCHDOG_NOTICE, 'link');
    }
  }
}
